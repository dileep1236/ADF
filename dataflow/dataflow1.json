{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Movies",
						"type": "DatasetReference"
					},
					"name": "MoviesADLS"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Select1"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "RankMoviesByRatings"
				},
				{
					"name": "AggregateRatings"
				},
				{
					"name": "Upseriftrue"
				}
			],
			"script": "source(output(\n\t\tFilm as string,\n\t\tGenre as string,\n\t\t{Lead Studio} as string,\n\t\t{Audience score %} as string,\n\t\tProfitability as string,\n\t\t{Rotten Tomatoes %} as string,\n\t\t{Worldwide Gross} as string,\n\t\tYear as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MoviesADLS\nMoviesADLS select(mapColumn(\n\t\tmovie = Film,\n\t\tGenre,\n\t\t{Lead Studio},\n\t\t{Audience score %},\n\t\tProfitability,\n\t\t{Rotten Tomatoes %},\n\t\t{Worldwide Gross},\n\t\tYear\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(toInteger(Year)>2010) ~> Filter1\nFilter1 window(over(Genre,\n\t\tYear),\n\tasc({Rotten Tomatoes %}, true),\n\tRatingsRank = rank()) ~> RankMoviesByRatings\nRankMoviesByRatings aggregate(groupBy(Genre,\n\t\tYear),\n\tAvarageRating = avg(toInteger({Rotten Tomatoes %})),\n\t\tHigestRated = first(movie),\n\t\tLeastRated = last(movie),\n\t\tNumberOfMovies = count()) ~> AggregateRatings\nAggregateRatings alterRow(upsertIf(true())) ~> Upseriftrue\nUpseriftrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
		}
	}
}