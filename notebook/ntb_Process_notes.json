{
	"name": "ntb_Process_notes",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "895bb6b5-51c2-4de1-a555-db3845fc5972"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a24c440-0c06-4d52-a071-b794d207e485/resourceGroups/dilnewsynapse/providers/Microsoft.Synapse/workspaces/tstdil/bigDataPools/spark",
				"name": "spark",
				"type": "Spark",
				"endpoint": "https://tstdil.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://cdm@adffhirttocdmstorage.dfs.core.windows.net/data/LocalObservation/*.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"#display(df.limit(10))           "
				],
				"execution_count": 189
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df= df.where(\"ValueString <>'undefined'\")"
				],
				"execution_count": 190
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df)"
				],
				"execution_count": 191
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"lit(df[\"ValueString\"])"
				],
				"execution_count": 192
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pip install  striprtf"
				],
				"execution_count": 193
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"str(df.select('ValueString').collect()[0].ValueString)"
				],
				"execution_count": 194
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from striprtf.striprtf import rtf_to_text\r\n",
					"text = rtf_to_text(df.select('ValueString').collect()[1].ValueString).replace('\\n','')\r\n",
					"text"
				],
				"execution_count": 195
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"list(df.select(\"ValueString\").collect())"
				],
				"execution_count": 196
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"import pyspark\r\n",
					"from pyspark.sql import SQLContext\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql import SQLContext\r\n",
					"from pyspark.sql.functions import udf\r\n",
					"from pyspark.sql import functions as F\r\n",
					"import subprocess\r\n",
					"import sys\r\n",
					"def install(package):\r\n",
					"    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package]) \r\n",
					"def rtftotxt(data_str: str):\r\n",
					"\r\n",
					"    from pyspark.sql.functions import lit\r\n",
					"    install('striprtf')\r\n",
					"    from striprtf.striprtf import rtf_to_text\r\n",
					"\r\n",
					"\r\n",
					"    text = rtf_to_text(data_str).replace('\\n','')\r\n",
					"    return text\r\n",
					"dummy_function_udf = udf(lambda x: rtftotxt(x), StringType())\r\n",
					"df = df.withColumn(\"Note\",dummy_function_udf(col(\"ValueString\")))"
				],
				"execution_count": 197
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"outputpath ='abfss://cdm@adffhirttocdmstorage.dfs.core.windows.net/data/FinalResults/Observation'"
				],
				"execution_count": 198
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df.coalesce(1).write.format(\"parquet\").mode(\"append\").save(outputpath)"
				],
				"execution_count": 199
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"outputfilename =\"Observation.parquet\"\r\n",
					"for File in mssparkutils.fs.ls(outputpath):\r\n",
					"    #print(File.name)\r\n",
					"    if(File.name.endswith(\"parquet\")):\r\n",
					"                #print(outputpath+\"/\"+outputfilename)\r\n",
					"        mssparkutils.fs.cp(File.path,outputpath+\"/\"+outputfilename,True)\r\n",
					"        mssparkutils.fs.rm(File.path,True)\r\n",
					"    else:\r\n",
					"\r\n",
					"        if(File.name=='_SUCCESS'):\r\n",
					"            mssparkutils.fs.rm(File.path,True)"
				],
				"execution_count": 200
			}
		]
	}
}